// This is an autogenerated file from Firebase Studio.
"use client";

import { useState, useEffect, createContext, useContext, ReactNode } from 'react';
import type { DiagnosisResultType } from '@/app/actions';

export type HistoryItem = {
    id: string;
    title: string;
    type: 'image' | 'symptoms' | 'insect';
    input: string; // data URI for image, or text for symptoms
    result: DiagnosisResultType;
    timestamp: string;
}

interface HistoryContextType {
    history: HistoryItem[];
    addHistory: (item: HistoryItem) => void;
    deleteHistory: (id: string) => void;
    clearHistory: () => void;
    selectedHistoryItem: HistoryItem | null;
    setSelectedHistoryItem: (item: HistoryItem | null) => void;
    open: boolean;
    setOpen: (open: boolean) => void;
}

const HistoryContext = createContext<HistoryContextType | undefined>(undefined);

const HISTORY_STORAGE_KEY = 'agri_doctor_history';

export const HistoryProvider = ({ children }: { children: ReactNode }) => {
    const [history, setHistory] = useState<HistoryItem[]>([]);
    const [selectedHistoryItem, setSelectedHistoryItem] = useState<HistoryItem | null>(null);
    const [open, setOpen] = useState(false);
    const [isLoaded, setIsLoaded] = useState(false);

    useEffect(() => {
        try {
            const storedHistory = localStorage.getItem(HISTORY_STORAGE_KEY);
            if (storedHistory) {
                setHistory(JSON.parse(storedHistory));
            }
        } catch (error) {
            console.error("Failed to load history from localStorage", error);
        }
        setIsLoaded(true);
    }, []);

    useEffect(() => {
        if (isLoaded) {
            try {
                localStorage.setItem(HISTORY_STORAGE_KEY, JSON.stringify(history));
            } catch (error) {
                console.error("Failed to save history to localStorage", error);
            }
        }
    }, [history, isLoaded]);

    const addHistory = (item: HistoryItem) => {
        setHistory(prevHistory => [item, ...prevHistory].slice(0, 50)); // Keep last 50 items
    };

    const deleteHistory = (id: string) => {
        setHistory(prevHistory => prevHistory.filter(item => item.id !== id));
    };
    
    const clearHistory = () => {
        setHistory([]);
    }

    const value = {
        history,
        addHistory,
        deleteHistory,
        clearHistory,
        selectedHistoryItem,
        setSelectedHistoryItem,
        open,
        setOpen,
    };

    return (
        <HistoryContext.Provider value={value}>
            {children}
        </HistoryContext.Provider>
    )
};

export const useHistory = (): HistoryContextType => {
    const context = useContext(HistoryContext);
    if (context === undefined) {
        throw new Error('useHistory must be used within a HistoryProvider');
    }
    return context;
};
